"use client";

import React, { useCallback, useEffect, useRef } from "react";
import useGameStore from "@/store/useGameStore";
import useRefStore from "@/store/useRefStore";


import { Button } from "@/components/ui/button";
import { CircleUser, Fullscreen } from "lucide-react";


import { Unity, useUnityContext } from "react-unity-webgl";
import UnityLoader from "@/components/unity-loader";
import FullscreenMode from "@/components/fullscreen-mode";
import MainMenu from "@/components/main-menu";
import MainMenuButton from "@/components/main-menu-btn";
import GameDialog from "@/components/dialog";
import LevelSelector from "@/components/level-selector";
import DialogAuth from "@/components/dialog-auth";


export default function Game() {

	/**
 * GAME/APP STATES
 */
	const {
		isUnityLoaded,
		setIsUnityLoaded,
		isMainMenuActive,
		setIsMainMenuActive,
		isLevelSelectorActive,
		setIsLevelSelectorActive
	} = useGameStore();



	/**
	 * CONTAINER REFERENCE
	 * Used for fullscreen compatibility, radix dialog and bypass react portal
	 */
	const containerRef = useRef<HTMLDivElement>(null);
	const { setContainerRef } = useRefStore();

	useEffect(() => {
		setContainerRef(containerRef)
	}, [setContainerRef]);



	/**
	 * UNITY PROVIDER (UNITY PLAYER)
	 */
	const {
		unityProvider,
		isLoaded,
		loadingProgression,
		addEventListener,
		removeEventListener,
		sendMessage
	} = useUnityContext({
		loaderUrl: "/game/Build/blitzer.loader.js",
		dataUrl: "/game/Build/blitzer.data",
		frameworkUrl: "/game/Build/blitzer.framework.js",
		codeUrl: "/game/Build/blitzer.wasm",
		companyName: "AWS Hackathon",
		productName: "Blitzer",
		productVersion: "1"
	});



	/**
	 * HANDLE UNITY LOADED STATE
	 * Receives event from Unity and sets the unity loaded state to true
	 */
	useEffect(() => {
		setIsUnityLoaded(isLoaded)
	}, [isLoaded]);



	/**
	 * HANDLE MAIN MENU STATE
	 * Receives event from Unity and sets the main menu state to true
	 * This is used to hide the unity player when the main menu is active
	 */
	const handleSetMainMain = useCallback(() => {
		setIsMainMenuActive(true)
	}, []);

	useEffect(() => {
		addEventListener("ActivateMainMenu", handleSetMainMain);
		return () => removeEventListener("ActivateMainMenu", handleSetMainMain);
	}, [addEventListener, removeEventListener, handleSetMainMain]);



	/**
	 * START A STANDARD GAME
	 * Sends event to Unity to start a standard game
	 */
	function handleStartStandardGame() {
		setIsMainMenuActive(false);
		sendMessage("MainMenuManager", "StartGame");
	}




	// const [isPaused, setIsPaused] = useState(false);



	// // Handle browser focus and blur events
	// useEffect(() => {
	// 	const handleBlur = () => {
	// 		setIsPaused(true); // Show the pause overlay
	// 	};

	// 	const handleFocus = () => {
	// 		setIsPaused(false); // Hide the pause overlay
	// 	};

	// 	window.addEventListener("blur", handleBlur);
	// 	window.addEventListener("focus", handleFocus);

	// 	return () => {
	// 		window.removeEventListener("blur", handleBlur);
	// 		window.removeEventListener("focus", handleFocus);
	// 	};
	// }, []);

	// const handleResume = () => {
	// 	setIsPaused(false); // Manually resume
	// };

	return (
		<div className="relative w-full h-screen" ref={containerRef}>

			<UnityLoader isLoaded={isLoaded} loadingProgression={loadingProgression} />
			<Unity id="game" unityProvider={unityProvider} className="fixed top-0 left-0 z-0 aspect-video w-full h-screen" />

			<MainMenu>
				<MainMenuButton onClick={handleStartStandardGame} title="Standard" description="Play 3 levels and beat the final boss." />
				<MainMenuButton onClick={() => setIsLevelSelectorActive(true)} title="AI Levels" description="Play a level generated by AWS Bedrock." />
				<MainMenuButton onClick={handleStartStandardGame} title="Boss Fight" description="Fight the boss in the final level." />
			</MainMenu>

			<LevelSelector />

			<DialogAuth />

			{/* <GameDialog container={containerRef} className="" /> */}


			{/* Pause Overlay */}
			{/* {isPaused && (
				<div className="absolute top-0 left-0 w-full h-full bg-black bg-opacity-50 flex flex-col justify-center items-center z-10">
					<h1 className="text-white text-4xl font-bold mb-4">Game Paused</h1>
					<button
						onClick={handleResume}
						className="px-4 py-2 bg-green-500 text-white text-lg rounded"
					>
						Resume
					</button>
				</div>
			)} */}

			{isUnityLoaded &&
				<div className="fixed z-50 top-0 right-0 flex gap-1 p-1">
					<FullscreenMode />
				</div>
			}
		</div>
	);
}
